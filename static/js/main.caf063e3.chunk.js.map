{"version":3,"sources":["logo.svg","screens/Home/_mocks/index.js","screens/Home/Home.js","screens/Home/index.js","screens/Home/Home.container.js","screens/Home/api/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","KeysToBeChecked","Wrapper","styled","div","SearchBar","input","List","ul","Item","li","props","isActive","css","NoResult","Home","activeIndex","checkMouseIndex","filteredList","filterList","isInputFocussed","isResultListVisible","setFocusOnInput","placeholder","onBlur","onChange","onFocus","id","map","elem","index","key","onMouseMove","parse","length","useState","userList","setUserList","setFilteredList","storedTimeout","setStoredTimeout","memoizedList","setMemoizedList","setActiveIndex","setResultListVisibility","activeIndexRef","useRef","setActiveIndexRef","current","filteredListRef","setFilteredListRef","data","updateIndex","e","includes","keyCode","list","document","querySelector","newIndex","scrollDiffFromTop","offsetHeight","scrollTop","scrollTo","useEffect","fetchMockData","addEventListener","a","fetch","response","json","responseJson","parseInt","clearTimeout","query","target","value","filteredUserList","timeout","setTimeout","forEach","user","userCard","card","normalizedQuery","toLowerCase","queryPresent","keyValue","Array","isArray","isPresent","some","highlightIndex","indexOf","valueArray","split","originalValue","splice","join","createFilteredCard","push","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.caf063e3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","/**\n Author - Saahil Madaan\n Git - https://bitbucket.org/techSavvySaahil/\n **/\n\nconst UserList = [\n  {\n    id: \"YTU_1\",\n    name: \"John\",\n    items: [\"charger\", \"phone\"],\n    address: \"#123, Aman street\",\n    pincode: \"560030\"\n  },\n  {\n    id: \"YTU_2\",\n    name: \"Aman\",\n    items: [\"laptop\", \"phone\"],\n    address: \"#132, Mary street\",\n    pincode: \"560031\"\n  },\n  {\n    id: \"YTU_3\",\n    name: \"Mary\",\n    items: [\"laptop\", \"charger\"],\n    address: \"#213, Aman street\",\n    pincode: \"560032\"\n  },\n  {\n    id: \"YTU_34\",\n    name: \"Amar\",\n    items: [\"charger\", \"camera\"],\n    address: \"#321, Rose street\",\n    pincode: \"560033\"\n  },\n  {\n    id: \"YTU_21\",\n    name: \"Rose\",\n    items: [\"camera\", \"phone\"],\n    address: \"#312, Johnny street\",\n    pincode: \"560034\"\n  },\n  {\n    id: \"YTU_41\",\n    name: \"Phone\",\n    items: [\"laptop\", \"camera\"],\n    address: \"#231, Mary street\",\n    pincode: \"560035\"\n  }\n];\n\nconst KeysToBeChecked = [\"id\", \"name\", \"items\", \"address\", \"pincode\"];\n\nexport {\n  UserList,\n  KeysToBeChecked\n};\n","/**\n Author - Saahil Madaan\n Git - https://bitbucket.org/techSavvySaahil/\n **/\n\nimport React from \"react\";\nimport styled, {css} from \"styled-components\";\nimport PropTypes from \"prop-types\";\nimport parse from 'html-react-parser';\n\nconst propTypes = {\n  activeIndex: PropTypes.number.isRequired,\n  checkMouseIndex: PropTypes.func.isRequired,\n  filterList: PropTypes.func.isRequired,\n  filteredList: PropTypes.array.isRequired,\n  isResultListVisible: PropTypes.bool.isRequired\n};\n\nconst Home = ({\n  activeIndex,\n  checkMouseIndex,\n  filteredList,\n  filterList,\n  isInputFocussed,\n  isResultListVisible,\n  setFocusOnInput\n}) => {\n  return (\n    <Wrapper>\n      <SearchBar\n        placeholder=\"Search for users and their details\"\n        onBlur={() => setFocusOnInput(false)}\n        onChange={filterList}\n        onFocus={() => setFocusOnInput(true)}\n      />\n      {\n        isInputFocussed && isResultListVisible && \n        (\n          <List id=\"userlist\">\n            {filteredList.map((elem, index) => {\n              return (\n                <Item\n                  id={`index_${index + 1}`}\n                  isActive={(index + 1) === activeIndex}\n                  key={index + 1}\n                  onMouseMove={() => checkMouseIndex(index + 1)}\n                >\n                  {parse(elem)}\n                </Item>\n              );\n            })}\n            {\n              !filteredList.length &&\n              (\n                <NoResult>No User Found</NoResult>\n              )\n            }\n          </List>\n        )\n      }\n    </Wrapper>\n  );\n};\n\nconst Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  width: 60%;\n  margin: auto;\n  span {\n    color: #0a77ea;\n  }\n`;\n\nconst SearchBar = styled.input`\n  outline: none;\n  border: none;\n  border-bottom: 1px solid #adadad;\n  margin: 0;\n  padding: 1rem;\n  width: 100%;\n  box-sizing: border-box;\n`;\n\nconst List = styled.ul`\n  margin: 0;\n  padding: 0;\n  width: 100%;\n  border: 1px solid #adadad;\n  border-top: 0;\n  border-radius: 0 0 5px 5px;\n  box-sizing: border-box;\n  max-height: 350px;\n  overflow: auto;\n  .id {\n    font-weight: 900;\n  }\n  .name {\n    font-weight: 600;\n    margin-top: 0.3rem;\n  }\n  .items {\n    font-size: 0.9rem;\n    margin-top: 0.4rem;\n  }\n  .address {\n    font-size: 0.9rem;\n    font-style: italic;\n    margin-top: 0.4rem;\n  }\n  .pincode {\n    font-size: 0.9rem;\n    font-style: italic;\n  }\n`;\n\nconst Item = styled.li`\n  list-style: none;\n  padding: 1rem;\n  border-bottom: 1px solid #adadad;\n  width: 100%;\n  height: 135px;\n  box-sizing: border-box;\n  text-align: left;\n  :last-child {\n    border: none;\n  }\n  ${props => props.isActive && css`\n    background-color: #eee;\n  `}\n`;\n\nconst NoResult = styled.div`\n  text-align: center;\n  padding: 2rem;\n`;\n\nHome.propTypes = propTypes;\n\nexport default Home;\n","/**\n Author - Saahil Madaan\n Git - https://bitbucket.org/techSavvySaahil/\n **/\n\nimport Home from \"./Home.container\";\n\nexport default Home;\n","/**\n Author - Saahil Madaan\n Git - https://bitbucket.org/techSavvySaahil/\n **/\n\nimport React, {\n  useState,\n  useEffect,\n  useRef\n} from \"react\";\n\nimport {\n  // UserList,\n  KeysToBeChecked\n} from \"./_mocks\";\n\nimport {fetchUserData} from \"./api\";\n\nimport Home from \"./Home\";\n\nconst HomeContainer = () => {\n  const [userList, setUserList] = useState([]);\n  const [filteredList, setFilteredList] = useState([]);\n  const [storedTimeout, setStoredTimeout] = useState(null);\n  const [memoizedList, setMemoizedList] = useState({});\n  const [activeIndex, setActiveIndex] = useState(0);\n  const [isResultListVisible, setResultListVisibility] = useState(false);\n  const [isInputFocussed, setFocusOnInput] = useState(false);\n\n  // useRef hook used for getting current state in event listener callback\n  const activeIndexRef = useRef(activeIndex);\n  const setActiveIndexRef = (index) => {\n    activeIndexRef.current = index;\n    setActiveIndex(index)\n  };\n\n  const filteredListRef = useRef(filteredList);\n  const setFilteredListRef = (data) => {\n    filteredListRef.current = data;\n    setFilteredList(data)\n  };\n\n  // for updating index with keyboard navigation\n  const updateIndex = (e) => {\n    if ([38, 40].includes(e.keyCode)) {\n      const list = document.querySelector(\"#userlist\");\n      let increment = 0;\n      let newIndex = activeIndex;\n      if (e.keyCode === 40) {\n        increment = activeIndexRef.current >= filteredListRef.current.length ? 0 : 1;\n        newIndex = increment + activeIndexRef.current;\n        debugger;\n        const item = document.querySelector(`#index_${newIndex}`);\n        const scrollDiffFromTop = (newIndex * item.offsetHeight) - list.offsetHeight;\n        const scrollDiff = scrollDiffFromTop - list.scrollTop;\n        if (scrollDiff > 0) {\n          list.scrollTo(0, scrollDiffFromTop);\n        }\n      } else {\n        increment = activeIndexRef.current <= 1 ? 0 : -1;\n        newIndex = increment + activeIndexRef.current;\n        const item = document.querySelector(`#index_${newIndex}`);\n        const scrollDiffFromTop = (newIndex - 1) * item.offsetHeight;\n        const scrollDiff = list.scrollTop - scrollDiffFromTop;\n        if (scrollDiff > 0) {\n          list.scrollTo(0, scrollDiffFromTop);\n        }\n      }\n      setActiveIndexRef(newIndex);\n    }\n  };\n\n  useEffect (() => {\n    fetchMockData();\n    document.addEventListener(\"keyup\", updateIndex);\n  }, []);\n\n  const fetchMockData = async () => {\n    const response = await fetchUserData();\n    const responseJson = await response.json();\n    setUserList(responseJson);\n  };\n\n  // creating cards for the filtered results\n  const createFilteredCard = ({user, query}) => {\n    let card = \"\";\n    const normalizedQuery = query.toLowerCase();\n    let queryPresent = false;\n    KeysToBeChecked.forEach(key => {\n      let keyValue = user[key];\n      if (keyValue) {\n        if (Array.isArray(keyValue)) {\n          const isPresent = keyValue.some(value => value.toLowerCase().includes(normalizedQuery));\n          queryPresent = queryPresent || isPresent;\n          keyValue = isPresent ? `<span class='highlight'>${query}</span> is present in ${key}` : \"\";\n        } else {\n          const value = keyValue.toLowerCase();\n          const highlightIndex = value.indexOf(normalizedQuery);\n          if (~highlightIndex) {\n            queryPresent = true;\n            const valueArray = keyValue.split(\"\");\n            const originalValue = valueArray.splice(highlightIndex, normalizedQuery.length).join(\"\");\n            valueArray.splice(highlightIndex, 0, `<span class='highlight'>${originalValue}</span>`);\n            keyValue = valueArray.join(\"\");\n          }\n        }\n        card += `<div class=${key}>${keyValue}</div>`;\n      }\n    });\n    return queryPresent && card;\n  };\n\n  const filterList = (e) => {\n    clearTimeout(storedTimeout);\n\n    const {value: query} = e.target;\n\n    if (!query) {\n      setResultListVisibility(false);\n      return;\n    }\n    \n    // checking for memoized list of results with unique query\n    if (memoizedList[query]) {\n      setFilteredListRef(memoizedList[query]);\n      setResultListVisibility(true);\n      setActiveIndexRef(1);\n    } else {\n      const filteredUserList = [];\n      \n      // debouncing\n      const timeout = setTimeout (() => {\n        userList.forEach(user => {\n          const userCard = createFilteredCard({user, query});\n          if (userCard) {\n            filteredUserList.push(userCard);\n          }\n        });\n        setFilteredListRef(filteredUserList);\n\n        // memoizing list of results with unique query\n        setMemoizedList(memoizedList => {\n          return {\n            ...memoizedList,\n            [query]: filteredUserList\n          }\n        });\n        setResultListVisibility(true);\n        setActiveIndexRef(1);\n      }, 1000);\n      setStoredTimeout(timeout);\n    }\n  };\n\n  const checkMouseIndex = (index) => {\n    setActiveIndexRef(parseInt(index));\n  };\n\n  return (\n    <Home\n      activeIndex={activeIndex}\n      checkMouseIndex={checkMouseIndex}\n      filteredList={filteredList}\n      filterList={filterList}\n      isInputFocussed={isInputFocussed}\n      isResultListVisible={isResultListVisible}\n      setFocusOnInput={setFocusOnInput}\n    />\n  )\n};\n\nexport default HomeContainer;\n","/**\n Author - Saahil Madaan\n Git - https://bitbucket.org/techSavvySaahil/\n **/\n\n const fetchUserData = () => {\n  const url = \"http://www.mocky.io/v2/5ba8efb23100007200c2750c\";\n  return fetch(url);\n};\n\nexport {fetchUserData};\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Home from \"./screens/Home\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Home />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}